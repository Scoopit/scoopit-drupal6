<?php
/**
 * @file
 * A block module that displays last posts from a scoop.it topic.
 */

/**
 * Implements hook_help().
 * Displays help and module information.
 *
 * @param path 
 *   Which path of the site we're using to display help
 * @param arg 
 *   Array that holds the current path as returned from arg() function
 */
function scoopit_help($path, $arg) {
  switch ($path) {
    case "admin/help#scoopit":
      return '<p>' . t("A module that displays scoop.it topic as a node.") . '</p>';
      break;
  }
}

/**
 * Implements hook_block_info().
 * Info about the module
 */
function scoopit_block_info() {
  $blocks['scoopit'] = array(
    // The name that will appear in the block list.
    'info' => t('Last Scoop.it posts'),
    // Default setting.
    'cache' => DRUPAL_CACHE_PER_ROLE,
  );
  return $blocks;
}

/**
 * Implementation of hook_menu().
 * add the configuration for Scoop.it
 */
function scoopit_menu() {
   $items = array();
   $items['admin/settings/scoopit'] = array(
    'title' => 'Scoop.it configuration',
    'description' => 'Configuration Scoop.it Module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_scoopit_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/******************* FRONT END PART ***********************/

/*------------------- NODE CREATION ---------------------**/

/**
 * Implements hook_node_info().
 * Declare a new node scoopit
 */
function scoopit_node_info() {
  // We define the node type as an associative array.
  return array(
    'scoopit' => array(
      'name' => t('Scoop.it Topic'),
      'base' => 'scoopit',
      'description' => t('Scoop.it page description'),
      'has_title' => TRUE,
      'has_body' => TRUE,
      'modified' => TRUE,
      'custom' => TRUE,
    ),
  );
}

function scoopit_form_alter(&$form, $form_state, $form_id) {

	// only alter scoopit forms. (see note 1)
	if ($form_id == 'scoopit_node_form') {
	
	$default = "";
	if (array_key_exists("#node", $form)) {
		$node = $form['#node'];
		$default = variable_get("topic_for_node_".$node->nid, "");
	}
	
	print_r(node_load($node->nid));

		// add a field to the form (see note 2)
		$form['title'] = array(
			'#type' => 'textfield',
			'#title' => t('Page Title'),
			'#default_value' => $form['#node']->title,
			'#weight' => -99,
		);
		$form['topicUrl'] = array(
			'#type' => 'textfield',
			'#title' => t('Topic Url'),
			'#default_value' => $default,
			'#weight' => -99,
		);


		//validate field
		$form['#validate'][] = 'scoopit_validate';


		// submit field
		// use array_unshift to submit this field before submitting the form.
		array_unshift($form['#submit'], 'scoopit_submit');
	}
}


function scoopit_validate($form, &$form_state) {
}

function scoopit_submit($form, &$form_state) {
	$node = $form['#node'];
	$node->title = $form_state['values']['title'];
	node_save($node);
	
	//it is an awfull hack
	variable_set("topic_for_node_".$node->nid, $form_state['values']['topicUrl']);
}

/**
 * implement hook_theme_registry_alter
 * Declare a new path for templates
 */
function scoopit_theme_registry_alter(&$theme_registry) {
  // Get the path to this module
  $modulepath = drupal_get_path('module', 'scoopit');
  // Add the module path on top in the array of paths
  array_unshift($theme_registry['node']['theme paths'], $modulepath);
}


/*
// add a template file suggestion
function scoopit_preprocess_node(&$vars) {    
      $vars['template_files'][] = 'node-scoopit';
}
*/

/********************* ADMIN PART *************************/

/**
 * Page callback: Current posts settings
 *
 */

function _scoopit_form() {
  $form['scoopit_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Scoop.it Consumer Key'),
    '#default_value' => variable_get('scoopit_key', "scoopit key"),
    '#description' => t('OAuth Consumer Key to access the Scoop.it API'),
    '#required' => TRUE,
  );
  
  $form['scoopit_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Scoop.it Consumer Secret'),
    '#default_value' => variable_get('scoopit_secret', "scoopit secret"),
    '#description' => t('OAuth Consumer Secret to access the Scoop.it API'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

?>